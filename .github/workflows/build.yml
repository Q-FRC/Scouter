# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  workflow_call:
    inputs:
      build_type:
        description: Type of build (Debug, Release, RelWithDebInfo, MinSizeRel)
        type: string
        default: Debug

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:

          - os: ubuntu-20.04
            qt_host: linux
            qt_version: '6.6.0'
            qt_arch: gcc_64

          - os: ubuntu-20.04
            qt_host: linux
            qt_version: '6.6.0'
            qt_arch: wasm_singlethread

          - os: windows-2022
            qt_host: windows
            qt_version: '6.6.0'
            qt_arch: win64_msvc2019_64

    runs-on: ${{ matrix.os }}

    env:
      INSTALL_DIR: "install"
      INSTALL_APPIMAGE_DIR: "install-appdir"
      INSTALL_WIN_DIR: "install-win"
      BUILD_DIR: "build"
      VERSION: "1.0.0"

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo ${{ matrix.qt_arch }}

    - name: Install MSVC (Windows)
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Install CMake
      uses: lukka/get-cmake@v3.28.1

    - name: Install Qt 6.6.0
      uses: jurplel/install-qt-action@v3.3.0
      with:
        version: 6.6.0
        aqtversion: ==3.1.*

    - name: Install Qt (WASM)
      if: matrix.qt_arch == 'wasm_singlethread'
      uses: jurplel/install-qt-action@v3.3.0
      with:
        version: 6.6.0
        aqtversion: ==3.1.*
        arch: ${{ matrix.qt_arch }}

    - name: Prepare AppImage (Linux)
      if: runner.os == 'Linux' && matrix.qt_arch == 'gcc_64'
      run: |
        sudo apt-get install libstdc++-10-dev gcc-10 ninja-build
        wget "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
        wget "https://github.com/linuxdeploy/linuxdeploy-plugin-appimage/releases/download/continuous/linuxdeploy-plugin-appimage-x86_64.AppImage"
        wget "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage"

    - name: Prepare Emscripten (Linux)
      if: runner.os == 'Linux' && matrix.qt_arch == 'wasm_singlethread'
      uses: mymindstorm/setup-emsdk@v13
      with:
        # Version to install
        version: 3.1.37

    - name: Configure and Build (Linux)
      if: runner.os == 'Linux'
      run: |
        git submodule update --init --recursive
        declare QTPATH="${{ github.workspace }}/../Qt/${{ matrix.qt_version }}"

        #        cmake -S . -B ${{ env.BUILD_DIR }} -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=/usr/bin/g++-10 -DQT_HOST_PATH="$QTPATH/gcc_64" -DQT_HOST_PATH_CMAKE_DIR="$QTPATH/${{ matrix.qt_arch }}/lib/cmake"
        cmake -S . -B ${{ env.BUILD_DIR }} -DCMAKE_TOOLCHAIN_FILE=$QTPATH/${{ matrix.qt_arch }}/lib/cmake/Qt6/qt.toolchain.cmake -DQT_HOST_PATH=$QTPATH/gcc_64 -DQT_HOST_PATH_CMAKE_DIR=$QTPATH/${{ matrix.qt_arch }}/lib/cmake -DCMAKE_PREFIX_PATH=$QTPATH/${{ matrix.qt_arch }}/lib/cmake
        cmake --build ${{ env.BUILD_DIR }} --parallel $(nproc)

        ls ${{ env.BUILD_DIR }}

    - name: Configure and Build (Windows)
      if: runner.os == 'Windows'
      run: |
        git submodule update --init --recursive
        cmake -S . -B ${{ env.BUILD_DIR }} -G "Ninja" -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=${{ inputs.build_type }}

        cmake --build ${{ env.BUILD_DIR }} --config ${{ inputs.build_type }} --parallel $(nproc)

    - name: Package (Linux)
      if: runner.os == 'Linux'
      run: |
        cmake --install ${{ env.BUILD_DIR }} --prefix ${{ env.INSTALL_DIR }}/usr

        cd ${{ env.INSTALL_DIR }}
        if [ "${{ matrix.qt_arch }}" == "gcc_64" ]
          then tar --owner root --group root -czf ../QFRCScouter.tar.gz *
          #else
          #tar --owner root --group root -czf ../QFRCScouter-WASM.tar.gz
        fi

    - name: Package AppImage (Linux)
      if: runner.os == 'Linux' && matrix.qt_arch == 'gcc_64'
      shell: bash
      run: |
        sudo apt-get install libxcb-cursor-dev libxcb-cursor0
        mkdir -p ${{ env.INSTALL_APPIMAGE_DIR}}/usr/{lib,bin}

        cmake --install ${{ env.BUILD_DIR }} --prefix ${{ env.INSTALL_APPIMAGE_DIR }}/usr

        export OUTPUT="QFRCScouter-${{ runner.os }}-${{ env.VERSION }}-${{ inputs.build_type }}-x86_64.AppImage"

        chmod +x linuxdeploy-*.AppImage

        mkdir -p ${{ env.INSTALL_APPIMAGE_DIR }}/usr/plugins/iconengines

        cp -r /home/runner/work/QFRCScouter/Qt/${{ matrix.qt_version }}/gcc_64/plugins/iconengines/* ${{ env.INSTALL_APPIMAGE_DIR }}/usr/plugins/iconengines

        cp /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1 ${{ env.INSTALL_APPIMAGE_DIR }}/usr/lib/
        cp /usr/lib/x86_64-linux-gnu/libssl.so.1.1 ${{ env.INSTALL_APPIMAGE_DIR }}/usr/lib/

        ./linuxdeploy-x86_64.AppImage --appdir ${{ env.INSTALL_APPIMAGE_DIR }} --output appimage --plugin qt

    - name: Package (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        mkdir ${{ env.INSTALL_WIN_DIR }}
        set PATH=%PATH%;"${{ runner.workspace }}\Qt\6.6.0\msvc2019_64\bin"

        windeployqt ${{ env.BUILD_DIR }}\QFRCScouter.exe --dir ${{ env.INSTALL_WIN_DIR }}
        cp ${{ env.BUILD_DIR }}\QFRCScouter.exe ${{ env.INSTALL_WIN_DIR }}

        if "${{ inputs.build_type }}" == "Debug" (
          cp C:\Windows\System32\ucrtbased.dll ${{ env.INSTALL_WIN_DIR }}
        ) else (
          cp C:\Windows\System32\ucrtbase.dll ${{ env.INSTALL_WIN_DIR }}
        )


      ##
      # UPLOAD BUILDS
      ##
      #
    - name: Upload WASM (Linux)
      if: runner.os == 'Linux' && matrix.qt_arch == 'wasm_singlethread'
      uses: actions/upload-artifact@v3
      with:
        name: QFRCScouter-WASM-${{ runner.os }}-Binary-${{ env.VERSION }}-${{ inputs.build_type }}
        path: ${{ env.BUILD_DIR }}/*.{js,wasm,svg,html}

    - name: Upload portable tarball (Linux)
      if: runner.os == 'Linux' && matrix.qt_arch == 'gcc_64'
      uses: actions/upload-artifact@v3
      with:
        name: QFRCScouter-${{ runner.os }}-Binary-${{ env.VERSION }}-${{ inputs.build_type }}
        path: QFRCScouter.tar.gz

    - name: Upload AppImage (Linux)
      if: runner.os == 'Linux' && matrix.qt_arch == 'gcc_64'
      uses: actions/upload-artifact@v3
      with:
        name: QFRCScouter-${{ runner.os }}-${{ env.VERSION }}-${{ inputs.build_type }}-x86_64.AppImage
        path: QFRCScouter-${{ runner.os }}-${{ env.VERSION }}-${{ inputs.build_type }}-x86_64.AppImage

    - name: Upload portable zip (Windows)
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v3
      with:
        name: QFRCScouter-Windows-Portable-${{ env.VERSION }}-${{ inputs.build_type }}
        path: ${{ env.INSTALL_WIN_DIR }}/**
